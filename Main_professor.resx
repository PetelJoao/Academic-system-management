<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="guna2ImageButton1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAO
        vAAADrwBlbxySQAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAABDQSURBVHhe7d3L
        rp11HcbxDRFHVsEQ5oIXAAnch4VqdCAmxjg1Nh1CAWdCqFdgjOF0AcoFSHCCKCalzmwYCshBR2BC9fdv
        kGzkwR7Y3V3rfT6f5Js0a6/jpM/Oevda7wGwaXdNp6bHphemP04Xp3enf33c+ve6bP3s+ens9NC0bgsA
        7IkHpnPT+enS9O/rbN123cfT0/0TALBjvjqdmf4ypTE/ii5M6zFOTADATfT16YlpvY2fRvtGtB7r8emO
        CQA4RrdMD09vTWmkj6N3pp9Mt04AwA32zen3Uxrlm9HL0z0TAHCDnJzem9IQ38z+OX13AgCO0Hqb/RdT
        Gt9dan1iwCEBADgCX57W5/PT4O5iz023TQDAdVrj/+KUhnaX++3klwAAuA7rL/1/PaWB3YfWuxYOBwDA
        NdqHY/5X6qkJALhK357SoO5j35sAgCtYn6l/f0pjuo+t13L3BAB8jnXcf5e+5Oeoemlarw0ACH40pQHd
        Qj+YAID/sU7s8/aUxnMLvTndPgEAh/xsSsO5pc5OAMDH1vn8j/OUvjerdQbBExMAMM5MaTC32OkJABjn
        pzSWW+zCBAD1HpjSUG65+yYAqHZuSiO55XxFMAD1Xp/SSG651yYAqHXXdGlKI7nl1mu+cwKASqemNJAN
        PTgBQKXHpzSODT06AUClF6Y0jg09OwFApVenNI4NvTIBQKU3pjSODV2cAKDS+m78NI4NrTMfAkClD6c0
        jg19MAFApTSMTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFA
        pTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFA
        pTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFA
        pTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFA
        pTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFA
        pTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFA
        pTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFA
        pTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFA
        pTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFA
        pTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFA
        pTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFA
        pTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFA
        pTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFA
        pTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFA
        pTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFA
        pTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFA
        pTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFA
        pTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFA
        pTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFApTSKTQFA
        pTSKTQFApTSKTQFApTSKTQEbdtd0anpsemH643Rxenf615T+U5AkaeutDVxbuDZxbePz09npoWlt5156
        YDo3nZ8uTemFS5Kk3NrOtaFPT/dPO+2r05npL1N6MZIk6fq6MK2NPTHtjK9PT0zrbYz0pCVJ0tG0tvbx
        6Y7pprllenh6a0pPUpIk3ZjemX4y3Todq29Ov5/Sk5IkScfTy9M907E4Ob03pSciSZKOt39O351umPU2
        wy+m9OCSJOnmtj4xcOSHBL48rc8npgeUJEm70XPTbdORWOP/4pQeSJIk7Va/nb7wLwHrL/1/PaUHkCRJ
        u9l61/4LHQ5wzF+SpP3sqem6fHtKdyhJkvaj703XZH2m8P0p3ZkkSdqP1pbfPV2Vddzfl/xIkrSNXprW
        tl/Rj6Z0B5IkaT/7wfR/rRP7vD2lG0uSpP3szen26XP9bEo3lCRJ+93ZKVrn83dKX0mSttk6g+CJ6TPO
        TOkGkiRpG52ePuP8lK4sSZK20YXpUx6Y0hUlSdK2um/6xLkpXUmSJG2rT31F8OtTupIkSdpWr02X3TVd
        mtKVJEnStlqbf+d0cOrjCyRJUkcPTgePH7pAkiRtv0engxcOXSBJkrbfs9PBq4cukCRJ2++V6eCNQxdI
        kqTtd3G6/N3A6YeSJGmbrTP/Hnx46AJJkrT9Ppj8AiBJUlmXfwFwCECSpK4uHwLwR4CSJHV1+Y8AfQxQ
        kqSuLn8M8PlDF0iSpO33zHTw2KELJEnS9ntkOnjo0AWSJGn7nZycDliSpKI+mi6fDng5P6UrSZKkbfWn
        6RPnpnQlSZK0rZ6cPnH/lK4kSZK21b3TpzgMIEnStrswfcaZKV1ZkiRto9PTZ5yY3p3SDSRJ0n63zv2z
        tj56Yko3kiRJ+92j0+e6Y3prSjeUJEn72d+mr03/1w+ndGNJkrSffX+6oluml6d0B5Ikab/63bS2/arc
        M70/pTuSJEn70XvT3dM1OTWlO5MkSfvRg9N1eXpKdyhJkna7n0/XbR0z+NWU7liSJO1mz023Tl/IbdOL
        U3oASZK0W/1mWtt9JL40/XJKDyRJknajZ6YjG///WocDnprSA0qSpJvXpWkd87/qj/tdj29NzhkgSdJu
        9I/pO9OxWJ8pfGlKT0SSJB1P60t+vjEdq/U2w8PTm1N6UpIk6ca0zuz34+mGvuV/JbdPZ6f1ZNKTlCRJ
        R9Pfp3VWvyue2Oc4fWU6Pb0+pSctSZKur/PTT6e1tTvtvml9YuDP00dTejGSJCm3tvO16cnp3mkv3Tmt
        7yJ+ZFrfTPSH6a/TOmTw4ZReuCRJW29t4NrCtYlrG5+d1laenNZ2AhuW/lNoCgAqpVFsCgAqpVFsCgAq
        pVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAq
        pVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAq
        pVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAq
        pVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAq
        pVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAq
        pVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAq
        pVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAq
        pVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAq
        pVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAq
        pVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAq
        pVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAq
        pVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAq
        pVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAq
        pVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAq
        pVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAq
        pVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAq
        pVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAq
        pVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAq
        pVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqpVFsCgAqfTilYWzo
        gwkAKr0zpXFs6O0JACq9MaVxbOjiBACVXp3SODb0ygQAlZ6f0jg29MwEAJUem9I4NvTIBACVHprSODZ0
        cgKASndNl6Y0kFvuo+nOCQBqnZ/SSG65P00AUO3clEZyyz05AUC1+6c0klvu3gkA6jUdBrgwAQDjzJTG
        coudngCAcWJ6d0qDuaXWuQ/WawUAPvbElEZzSz06AQCH3DG9NaXh3EJ/m742AQD/44dTGs8t9P0JAAhu
        mV6e0oDuc7+b1msDAD7HPdP7UxrSfey96e4JALiCU1Ma033swQkAuEpPT2lQ96mfTwDANVjHzH81pWHd
        h56bbp0AgGt02/TilAZ2l/vNtJ47AHCdvjT9ckpDu4s9Mxl/ADgC63DAU1Ma3F3p0rSO+fu4HwAcsW9N
        u3jOgH9M35kAgBtkfab+pSkN8c1ofcnPNyYA4AZbb7M/PL05pVE+jtaZ/X48ecsfAI7Z7dPZaY1xGukb
        0d+ndVY/J/YBgJvsK9Pp6fUpjfZRdH766bQeCwDYMfdN6xMDf54+mtKYX03rtq9NT073TgDAnrhzWt/F
        /8i0vpnvD9Nfp3XI4MOPW/9el62fPTut656c1m2BTTo4+A/8sj1xmanmQgAAAABJRU5ErkJggg==
</value>
  </data>
</root>